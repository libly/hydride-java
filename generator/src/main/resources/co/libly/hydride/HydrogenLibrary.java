package co.libly.hydride;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import java.nio.ByteBuffer;
/**
 * JNA Wrapper for library <b>hydrogen</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class HydrogenLibrary implements Library {
	public static final String JNA_LIBRARY_NAME = "hydrogen";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(HydrogenLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(HydrogenLibrary.class, HydrogenLibrary.JNA_NATIVE_LIB);
	}
	public static final int HYDRO_VERSION_MAJOR = 1;
	public static final int HYDRO_VERSION_MINOR = 0;
	public static final int hydro_random_SEEDBYTES = 32;
	public static final int hydro_hash_BYTES = 32;
	public static final int hydro_hash_BYTES_MAX = 65535;
	public static final int hydro_hash_BYTES_MIN = 16;
	public static final int hydro_hash_CONTEXTBYTES = 8;
	public static final int hydro_hash_KEYBYTES = 32;
	public static final int hydro_secretbox_CONTEXTBYTES = 8;
	public static final int hydro_secretbox_HEADERBYTES = (20 + 16);
	public static final int hydro_secretbox_KEYBYTES = 32;
	public static final int hydro_secretbox_PROBEBYTES = 16;
	public static final int hydro_kdf_CONTEXTBYTES = 8;
	public static final int hydro_kdf_KEYBYTES = 32;
	public static final int hydro_kdf_BYTES_MAX = 65535;
	public static final int hydro_kdf_BYTES_MIN = 16;
	public static final int hydro_sign_BYTES = 64;
	public static final int hydro_sign_CONTEXTBYTES = 8;
	public static final int hydro_sign_PUBLICKEYBYTES = 32;
	public static final int hydro_sign_SECRETKEYBYTES = 64;
	public static final int hydro_sign_SEEDBYTES = 32;
	public static final int hydro_kx_SESSIONKEYBYTES = 32;
	public static final int hydro_kx_PUBLICKEYBYTES = 32;
	public static final int hydro_kx_SECRETKEYBYTES = 32;
	public static final int hydro_kx_PSKBYTES = 32;
	public static final int hydro_kx_SEEDBYTES = 32;
	public static final int hydro_kx_N_PACKET1BYTES = (32 + 16);
	public static final int hydro_kx_KK_PACKET1BYTES = (32 + 16);
	public static final int hydro_kx_KK_PACKET2BYTES = (32 + 16);
	public static final int hydro_kx_XX_PACKET1BYTES = (32 + 16);
	public static final int hydro_kx_XX_PACKET2BYTES = (32 + 32 + 16 + 16);
	public static final int hydro_kx_XX_PACKET3BYTES = (32 + 16 + 16);
	public static final int hydro_kx_NK_PACKET1BYTES = (32 + 16);
	public static final int hydro_kx_NK_PACKET2BYTES = (32 + 16);
	public static final int hydro_pwhash_CONTEXTBYTES = 8;
	public static final int hydro_pwhash_MASTERKEYBYTES = 32;
	public static final int hydro_pwhash_STOREDBYTES = 128;
	public static final int HYDRO_HWTYPE_ATMEGA328 = 1;
	public static native int hydro_init();
	public static native int hydro_random_u32();
	public static native int hydro_random_uniform(int upper_bound);
	public static native void hydro_random_buf(Pointer out, NativeSize out_len);
	public static native void hydro_random_buf_deterministic(Pointer out, NativeSize out_len, ByteBuffer seed);
	public static native void hydro_random_ratchet();
	public static native void hydro_random_reseed();
	public static native void hydro_hash_keygen(ByteBuffer key);
	public static native int hydro_hash_init(hydro_hash_state state, ByteBuffer ctx, ByteBuffer key);
	public static native int hydro_hash_update(hydro_hash_state state, Pointer in_, NativeSize in_len);
	public static native int hydro_hash_final(hydro_hash_state state, ByteBuffer out, NativeSize out_len);
	public static native int hydro_hash_hash(ByteBuffer out, NativeSize out_len, Pointer in_, NativeSize in_len, ByteBuffer ctx, ByteBuffer key);
	public static native void hydro_secretbox_keygen(ByteBuffer key);
	public static native int hydro_secretbox_encrypt(ByteBuffer c, Pointer m_, NativeSize mlen, long msg_id, ByteBuffer ctx, ByteBuffer key);
	public static native int hydro_secretbox_decrypt(Pointer m_, ByteBuffer c, NativeSize clen, long msg_id, ByteBuffer ctx, ByteBuffer key);
	public static native void hydro_secretbox_probe_create(ByteBuffer probe, ByteBuffer c, NativeSize c_len, ByteBuffer ctx, ByteBuffer key);
	public static native int hydro_secretbox_probe_verify(ByteBuffer probe, ByteBuffer c, NativeSize c_len, ByteBuffer ctx, ByteBuffer key);
	public static native void hydro_kdf_keygen(ByteBuffer key);
	public static native int hydro_kdf_derive_from_key(ByteBuffer subkey, NativeSize subkey_len, long subkey_id, ByteBuffer ctx, ByteBuffer key);
	public static native void hydro_sign_keygen(hydro_sign_keypair kp);
	public static native void hydro_sign_keygen_deterministic(hydro_sign_keypair kp, ByteBuffer seed);
	public static native int hydro_sign_init(hydro_sign_state state, ByteBuffer ctx);
	public static native int hydro_sign_update(hydro_sign_state state, Pointer m_, NativeSize mlen);
	public static native int hydro_sign_final_create(hydro_sign_state state, ByteBuffer csig, ByteBuffer sk);
	public static native int hydro_sign_final_verify(hydro_sign_state state, ByteBuffer csig, ByteBuffer pk);
	public static native int hydro_sign_create(ByteBuffer csig, Pointer m_, NativeSize mlen, ByteBuffer ctx, ByteBuffer sk);
	public static native int hydro_sign_verify(ByteBuffer csig, Pointer m_, NativeSize mlen, ByteBuffer ctx, ByteBuffer pk);
	public static native void hydro_kx_keygen(hydro_kx_keypair static_kp);
	public static native void hydro_kx_keygen_deterministic(hydro_kx_keypair static_kp, ByteBuffer seed);
	public static native int hydro_kx_n_1(hydro_kx_session_keypair kp, ByteBuffer packet1, ByteBuffer psk, ByteBuffer peer_static_pk);
	public static native int hydro_kx_n_2(hydro_kx_session_keypair kp, ByteBuffer packet1, ByteBuffer psk, hydro_kx_keypair static_kp);
	public static native int hydro_kx_kk_1(hydro_kx_state state, ByteBuffer packet1, ByteBuffer peer_static_pk, hydro_kx_keypair static_kp);
	public static native int hydro_kx_kk_2(hydro_kx_session_keypair kp, ByteBuffer packet2, ByteBuffer packet1, ByteBuffer peer_static_pk, hydro_kx_keypair static_kp);
	public static native int hydro_kx_kk_3(hydro_kx_state state, hydro_kx_session_keypair kp, ByteBuffer packet2, hydro_kx_keypair static_kp);
	public static native int hydro_kx_xx_1(hydro_kx_state state, ByteBuffer packet1, ByteBuffer psk);
	public static native int hydro_kx_xx_2(hydro_kx_state state, ByteBuffer packet2, ByteBuffer packet1, ByteBuffer psk, hydro_kx_keypair static_kp);
	public static native int hydro_kx_xx_3(hydro_kx_state state, hydro_kx_session_keypair kp, ByteBuffer packet3, ByteBuffer peer_static_pk, ByteBuffer packet2, ByteBuffer psk, hydro_kx_keypair static_kp);
	public static native int hydro_kx_xx_4(hydro_kx_state state, hydro_kx_session_keypair kp, ByteBuffer peer_static_pk, ByteBuffer packet3, ByteBuffer psk);
	public static native int hydro_kx_nk_1(hydro_kx_state state, ByteBuffer packet1, ByteBuffer psk, ByteBuffer peer_static_pk);
	public static native int hydro_kx_nk_2(hydro_kx_session_keypair kp, ByteBuffer packet2, ByteBuffer packet1, ByteBuffer psk, hydro_kx_keypair static_kp);
	public static native int hydro_kx_nk_3(hydro_kx_state state, hydro_kx_session_keypair kp, ByteBuffer packet2);
	public static native void hydro_pwhash_keygen(ByteBuffer master_key);
	public static native int hydro_pwhash_deterministic(ByteBuffer h, NativeSize h_len, String passwd, NativeSize passwd_len, ByteBuffer ctx, ByteBuffer master_key, long opslimit, NativeSize memlimit, byte threads);
	public static native int hydro_pwhash_create(ByteBuffer stored, String passwd, NativeSize passwd_len, ByteBuffer master_key, long opslimit, NativeSize memlimit, byte threads);
	public static native int hydro_pwhash_verify(ByteBuffer stored, String passwd, NativeSize passwd_len, ByteBuffer master_key, long opslimit_max, NativeSize memlimit_max, byte threads_max);
	public static native int hydro_pwhash_derive_static_key(ByteBuffer static_key, NativeSize static_key_len, ByteBuffer stored, String passwd, NativeSize passwd_len, ByteBuffer ctx, ByteBuffer master_key, long opslimit_max, NativeSize memlimit_max, byte threads_max);
	public static native int hydro_pwhash_reencrypt(ByteBuffer stored, ByteBuffer master_key, ByteBuffer new_master_key);
	public static native int hydro_pwhash_upgrade(ByteBuffer stored, ByteBuffer master_key, long opslimit, NativeSize memlimit, byte threads);
	public static native void hydro_memzero(Pointer pnt, NativeSize len);
	public static native void hydro_increment(ByteBuffer n, NativeSize len);
	public static native byte hydro_equal(Pointer b1_, Pointer b2_, NativeSize len);
	public static native int hydro_compare(ByteBuffer b1_, ByteBuffer b2_, NativeSize len);
	public static native String hydro_bin2hex(String hex, NativeSize hex_maxlen, ByteBuffer bin, NativeSize bin_len);
	public static native int hydro_hex2bin(ByteBuffer bin, NativeSize bin_maxlen, String hex, NativeSize hex_len, String ignore, String hex_end_p[]);
	public static native int hydro_pad(ByteBuffer buf, NativeSize unpadded_buflen, NativeSize blocksize, NativeSize max_buflen);
	public static native int hydro_unpad(ByteBuffer buf, NativeSize padded_buflen, NativeSize blocksize);
}
