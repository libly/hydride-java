package co.libly.hydride;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class hydro_kx_session_keypair extends Structure {
	public byte[] rx = new byte[32];
	public byte[] tx = new byte[32];
	public hydro_kx_session_keypair() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("rx", "tx");
	}
	public hydro_kx_session_keypair(byte rx[], byte tx[]) {
		super();
		if ((rx.length != this.rx.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.rx = rx;
		if ((tx.length != this.tx.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.tx = tx;
	}
	public hydro_kx_session_keypair(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends hydro_kx_session_keypair implements Structure.ByReference {
		
	};
	public static class ByValue extends hydro_kx_session_keypair implements Structure.ByValue {
		
	};
}
