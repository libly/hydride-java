import org.gradle.api.GradleException
import org.gradle.api.tasks.Delete
import org.gradle.api.tasks.Exec

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'application'
}

group 'co.libly.generator'
version '0.0.1'
mainClassName = "${group}.Generator"

application {
    mainClass = mainClassName
}

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.18.0'
    implementation 'org.buildobjects:jproc:2.3.0'
    implementation "org.eclipse.jgit:org.eclipse.jgit.http.server:5.10.0.202012080955-r"
}


private String getSubFolders(Properties properties) {
    def packageString = properties.getProperty("package").replace(".", "/")
    return "/$packageString"
}

def loadVariables() {
    def properties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
    properties.load(inputStream)

    project.ext.extractionDirectory = properties.getProperty("extractionDirectory") ?: sourceSets.main.resources.srcDirs[0].absolutePath
    project.ext.subFolders = getSubFolders(properties)
    project.ext.outputPackage = properties.getProperty("package") ?: group
    project.ext.firstDir = subFolders.substring(1).split("/")[0]
    project.ext.copyToDir = properties.getProperty("copyToDir") ?: rootProject.project.sourceSets.main.kotlin.srcDirs[0].absolutePath
}

// Load the properties file into the project's ext scope
loadVariables()

// Override the run task with our args
run {
    args "$extractionDirectory$subFolders"
}

task cloneTheRepo(type: Exec) {
    workingDir extractionDirectory
    println("[HYDRIDE] Cloning libhydrogen")
    if (!workingDir.isDirectory()) {
        throw new GradleException("[HYDRIDE] Please ensure extractionDirectory is a directory.")
    }
    File libhydrogenDir = new File(workingDir, "libhydrogen")
    if (libhydrogenDir.exists()) {
        workingDir libhydrogenDir
        println("[HYDRIDE] Libhydrogen already exists, pulling instead")
        commandLine "git", "pull"
    } else {
        commandLine "git", "clone", "https://github.com/jedisct1/libhydrogen"
    }
    println("[HYDRIDE] Cloning complete.")
}

task removePreviousCode(type: Exec) {
    workingDir extractionDirectory
    println("[HYDRIDE] Removing previously generated code")
    commandLine "rm", "-rf", "co"
}

task generateJNAUsingScript(type: Exec) {
    workingDir "$extractionDirectory"
    println("[HYDRIDE] Generating code")
    commandLine "sh", "jnaerate.sh", file("libs/jnaerator.jar").absolutePath, (String) project.ext.outputPackage
}

task generateJNA(type: Exec) {
    workingDir "$extractionDirectory/libhydrogen"
    println("[HYDRIDE] Generating code")
    commandLine "sh", "jnaerate.sh", file("libs/jnaerator.jar").absolutePath, (String) project.ext.outputPackage
    String packageName = (String) project.ext.outputPackage
    String jnaJar = file("libs/jnaerator.jar").absolutePath
    String out = "../"
    List<String> commandBuilder = ["java", "-jar", jnaJar, "-library", "hydrogen"].toList()
    commandBuilder.addAll("-o $out -v -mode Directory -runtime JNA".split())
    commandBuilder.addAll("-skipDeprecated -forceStringSignatures -dontCastConstants -direct -noPrimitiveArrays -limitComments -noComments -noStaticInit".split())
    commandBuilder.addAll("-package $packageName -f".split())
    commandBuilder.add("hydrogen.h")
    commandLine commandBuilder
}

task moveGenerated(type: Copy) {
    // This line forces this task to always run. If
    // we did not force this to run then what happens
    // is it won't move and overwrite the files that have been
    // already been output. E.g. if we made a change in Generator.kt
    // to update all methods to have a number, then if the following
    // line was not added then this task would be "UP-TO-DATE"
    // and therefore nothing will change in the output files.
    outputs.upToDateWhen { false }

    def destDir = "$copyToDir/$firstDir"
    def generated = "$extractionDirectory/$firstDir"
    def source = file(generated)
    def dest = file(destDir)
    from source
    into dest

    println "[HYDRIDE] Moved $generated into $destDir"
}

task cleanExtracted(type: Delete) {
    delete "$extractionDirectory/$firstDir"
    followSymlinks = true
}

task removeLibydrogen(type: Delete) {
    delete "$extractionDirectory/libhydrogen"
    followSymlinks = true
}

task runAllTasks(dependsOn: [cloneTheRepo,
                             removePreviousCode,
                             generateJNA,
                             run,
                             moveGenerated,
                             cleanExtracted,
                             removeLibydrogen]) {

}

removePreviousCode.mustRunAfter cloneTheRepo
generateJNA.mustRunAfter removePreviousCode
run.mustRunAfter generateJNA
moveGenerated.mustRunAfter run
cleanExtracted.shouldRunAfter moveGenerated
removeLibydrogen.shouldRunAfter cleanExtracted